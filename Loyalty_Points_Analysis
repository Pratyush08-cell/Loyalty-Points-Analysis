{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "25592e10-9018-483e-b32f-6d6628c80f33",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing Required Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime as dt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ba602f56-017a-4628-8b50-d189b6aac303",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the Excel File\n",
    "game_df = pd.ExcelFile(\"E://New folder//Analytics Position Case Study - Question.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4ffd474b-46b6-4d43-99dc-2cebb051d528",
   "metadata": {},
   "outputs": [],
   "source": [
    "deposit_df = game_df.parse(sheet_name=\"Deposit Data\", skiprows=3)\n",
    "withdrawal_df = game_df.parse(sheet_name=\"Withdrawal Data\", skiprows=3)\n",
    "gameplay_df = game_df.parse(sheet_name=\"User Gameplay data\", skiprows=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92d722c0-3111-4002-9690-7ba191ea7f23",
   "metadata": {},
   "source": [
    "### Preview of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d2572424-da05-49f4-b172-cf576355be9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 17438 entries, 0 to 17437\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype \n",
      "---  ------    --------------  ----- \n",
      " 0   User Id   17438 non-null  int64 \n",
      " 1   Datetime  17438 non-null  object\n",
      " 2   Amount    17438 non-null  int64 \n",
      "dtypes: int64(2), object(1)\n",
      "memory usage: 408.8+ KB\n"
     ]
    }
   ],
   "source": [
    "deposit_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "53b9303e-98b3-47cf-acb7-c115fa612d23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Datetime</th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>357</td>\n",
       "      <td>2022-01-10 00:03:00</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>776</td>\n",
       "      <td>2022-01-10 00:03:00</td>\n",
       "      <td>2500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>492</td>\n",
       "      <td>2022-01-10 00:06:00</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>803</td>\n",
       "      <td>2022-01-10 00:07:00</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>875</td>\n",
       "      <td>2022-01-10 00:09:00</td>\n",
       "      <td>1500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id             Datetime  Amount\n",
       "0      357  2022-01-10 00:03:00    2000\n",
       "1      776  2022-01-10 00:03:00    2500\n",
       "2      492  2022-01-10 00:06:00    5000\n",
       "3      803  2022-01-10 00:07:00    5000\n",
       "4      875  2022-01-10 00:09:00    1500"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "deposit_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "90e6aa93-d5d5-4b01-832e-dcbbbf1b4ff0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3566 entries, 0 to 3565\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype \n",
      "---  ------    --------------  ----- \n",
      " 0   User Id   3566 non-null   int64 \n",
      " 1   Datetime  3566 non-null   object\n",
      " 2   Amount    3566 non-null   int64 \n",
      "dtypes: int64(2), object(1)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "withdrawal_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "58e8a311-359d-4426-9a66-537d51618058",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Datetime</th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>190</td>\n",
       "      <td>2022-01-10 00:03:00</td>\n",
       "      <td>5872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>159</td>\n",
       "      <td>2022-01-10 00:16:00</td>\n",
       "      <td>9540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>164</td>\n",
       "      <td>2022-01-10 00:24:00</td>\n",
       "      <td>815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>946</td>\n",
       "      <td>2022-01-10 00:29:00</td>\n",
       "      <td>23000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>763</td>\n",
       "      <td>2022-01-10 00:40:00</td>\n",
       "      <td>9473</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id             Datetime  Amount\n",
       "0      190  2022-01-10 00:03:00    5872\n",
       "1      159  2022-01-10 00:16:00    9540\n",
       "2      164  2022-01-10 00:24:00     815\n",
       "3      946  2022-01-10 00:29:00   23000\n",
       "4      763  2022-01-10 00:40:00    9473"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "withdrawal_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7995150c-1f2b-4b4f-8aec-ca1144216995",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 355266 entries, 0 to 355265\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count   Dtype \n",
      "---  ------        --------------   ----- \n",
      " 0   User ID       355266 non-null  int64 \n",
      " 1   Games Played  355266 non-null  int64 \n",
      " 2   Datetime      355266 non-null  object\n",
      "dtypes: int64(2), object(1)\n",
      "memory usage: 8.1+ MB\n"
     ]
    }
   ],
   "source": [
    "gameplay_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f1a4b3f0-50b9-492c-b017-2120f5398b08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>Games Played</th>\n",
       "      <th>Datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>851</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>717</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>456</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>424</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>845</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID  Games Played             Datetime\n",
       "0      851             1  2022-01-10 00:00:00\n",
       "1      717             1  2022-01-10 00:00:00\n",
       "2      456             1  2022-01-10 00:00:00\n",
       "3      424             1  2022-01-10 00:00:00\n",
       "4      845             1  2022-01-10 00:00:00"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gameplay_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6537b6ed-aeab-40cc-b61b-ddf337f3f4bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rename 'User ID' to match others\n",
    "gameplay_df.rename(columns={'User ID': 'User Id'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "eb681f72-5ce4-4bd1-9b25-385e9c975004",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Games Played</th>\n",
       "      <th>Datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>851</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>717</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>456</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>424</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>845</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id  Games Played             Datetime\n",
       "0      851             1  2022-01-10 00:00:00\n",
       "1      717             1  2022-01-10 00:00:00\n",
       "2      456             1  2022-01-10 00:00:00\n",
       "3      424             1  2022-01-10 00:00:00\n",
       "4      845             1  2022-01-10 00:00:00"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gameplay_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae5b5780-aa62-46c9-b2d2-2b510c298fe9",
   "metadata": {},
   "source": [
    "### Calculate Scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "5ae196d6-52f3-4685-be65-f5f26f118951",
   "metadata": {},
   "outputs": [],
   "source": [
    "# the Deposit Score is 0.01 of Amount\n",
    "deposit_df['Deposit Score'] = 0.01 * deposit_df['Amount']\n",
    "deposit_scores = deposit_df.groupby('User Id')['Deposit Score'].sum().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "a26023a3-8179-49f0-9a7f-e1967a32f09f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Datetime</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Deposit Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>357</td>\n",
       "      <td>2022-01-10 00:03:00</td>\n",
       "      <td>2000</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>776</td>\n",
       "      <td>2022-01-10 00:03:00</td>\n",
       "      <td>2500</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>492</td>\n",
       "      <td>2022-01-10 00:06:00</td>\n",
       "      <td>5000</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>803</td>\n",
       "      <td>2022-01-10 00:07:00</td>\n",
       "      <td>5000</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>875</td>\n",
       "      <td>2022-01-10 00:09:00</td>\n",
       "      <td>1500</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id             Datetime  Amount  Deposit Score\n",
       "0      357  2022-01-10 00:03:00    2000           20.0\n",
       "1      776  2022-01-10 00:03:00    2500           25.0\n",
       "2      492  2022-01-10 00:06:00    5000           50.0\n",
       "3      803  2022-01-10 00:07:00    5000           50.0\n",
       "4      875  2022-01-10 00:09:00    1500           15.0"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deposit_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "16514bc8-d83a-4b11-8990-a2807752287b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Deposit Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5670.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>17.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>741.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id  Deposit Score\n",
       "0        1           50.0\n",
       "1        2         5670.0\n",
       "2        3          400.0\n",
       "3        4           17.5\n",
       "4        5          741.0"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deposit_scores.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "ce2f1fc7-daee-418f-9036-42d1537b20ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The withdrawal Score is 0.005 of Amount\n",
    "withdrawal_df['Withdrawal Score'] = 0.005 * withdrawal_df['Amount']\n",
    "withdrawal_scores = withdrawal_df.groupby('User Id')['Withdrawal Score'].sum().reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "1a365c03-b992-4557-a1f5-58d0ac66c9a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Datetime</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Withdrawal Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>190</td>\n",
       "      <td>2022-01-10 00:03:00</td>\n",
       "      <td>5872</td>\n",
       "      <td>29.360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>159</td>\n",
       "      <td>2022-01-10 00:16:00</td>\n",
       "      <td>9540</td>\n",
       "      <td>47.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>164</td>\n",
       "      <td>2022-01-10 00:24:00</td>\n",
       "      <td>815</td>\n",
       "      <td>4.075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>946</td>\n",
       "      <td>2022-01-10 00:29:00</td>\n",
       "      <td>23000</td>\n",
       "      <td>115.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>763</td>\n",
       "      <td>2022-01-10 00:40:00</td>\n",
       "      <td>9473</td>\n",
       "      <td>47.365</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id             Datetime  Amount  Withdrawal Score\n",
       "0      190  2022-01-10 00:03:00    5872            29.360\n",
       "1      159  2022-01-10 00:16:00    9540            47.700\n",
       "2      164  2022-01-10 00:24:00     815             4.075\n",
       "3      946  2022-01-10 00:29:00   23000           115.000\n",
       "4      763  2022-01-10 00:40:00    9473            47.365"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "withdrawal_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "b750b08d-810a-4c2e-ad4f-6866a9741a4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Withdrawal Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>6351.075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>163.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>33.085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>857.280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11</td>\n",
       "      <td>507.500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id  Withdrawal Score\n",
       "0        2          6351.075\n",
       "1        5           163.500\n",
       "2        7            33.085\n",
       "3        9           857.280\n",
       "4       11           507.500"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "withdrawal_scores.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "3f0bc219-574d-4272-b486-dc37fdae172e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The gameplay Score is 0.2 of games played\n",
    "gameplay_df['Gameplay Score'] = 0.2 * gameplay_df['Games Played']\n",
    "gameplay_scores = gameplay_df.groupby('User Id')['Gameplay Score'].sum().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "dc9ce927-fcda-436e-8dd1-0230bae83f0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Games Played</th>\n",
       "      <th>Datetime</th>\n",
       "      <th>Gameplay Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>851</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>717</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>456</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>424</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>845</td>\n",
       "      <td>1</td>\n",
       "      <td>2022-01-10 00:00:00</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id  Games Played             Datetime  Gameplay Score\n",
       "0      851             1  2022-01-10 00:00:00             0.2\n",
       "1      717             1  2022-01-10 00:00:00             0.2\n",
       "2      456             1  2022-01-10 00:00:00             0.2\n",
       "3      424             1  2022-01-10 00:00:00             0.2\n",
       "4      845             1  2022-01-10 00:00:00             0.2"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gameplay_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "0afa76c7-9afb-434c-aecc-937a85db91ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Gameplay Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>19.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id  Gameplay Score\n",
       "0        0             3.0\n",
       "1        1             1.6\n",
       "2        2            19.4\n",
       "3        3            16.0\n",
       "4        4             1.0"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gameplay_scores.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "38b3537e-fd17-4af6-8619-2fca2bbfcfc1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count number of deposits and withdrawals per user\n",
    "deposit_counts = deposit_df['User Id'].value_counts().reset_index()\n",
    "deposit_counts.columns = ['User Id', 'Num Deposits']\n",
    "\n",
    "withdrawal_counts = withdrawal_df['User Id'].value_counts().reset_index()\n",
    "withdrawal_counts.columns = ['User Id', 'Num Withdrawals']\n",
    "\n",
    "# Merge both counts\n",
    "freq_df = pd.merge(deposit_counts, withdrawal_counts, on='User Id', how='outer').fillna(0)\n",
    "\n",
    "# Calculate frequency difference score\n",
    "freq_df['Frequency Diff Score'] = 0.001 * (freq_df['Num Deposits'] - freq_df['Num Withdrawals']).clip(lower=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "fe5a582b-0e41-4881-82a3-d0180f8e0da8",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'function' object has no attribute 'sum'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[126], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m freq_df\u001b[38;5;241m.\u001b[39misnull\u001b[38;5;241m.\u001b[39msum()\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'function' object has no attribute 'sum'"
     ]
    }
   ],
   "source": [
    "freq_df.isnull.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f992cfa-a772-4412-a02d-5e3550304b25",
   "metadata": {},
   "source": [
    "### Merging all the tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "0d09019b-ce17-42fe-a17d-643cd2a6791a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# merging deposit and withdrawal scores\n",
    "total = pd.merge(deposit_scores, withdrawal_scores, on='User Id', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "3166d12d-f1b9-4bf7-9aea-f069de2d7dda",
   "metadata": {},
   "outputs": [],
   "source": [
    "# merging gameplay scores\n",
    "total = pd.merge(total, gameplay_scores, on='User Id', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "ce415b47-0105-47b8-bf8f-4c7df18b3068",
   "metadata": {},
   "outputs": [],
   "source": [
    "# merging with frequency difference scores\n",
    "total = pd.merge(total, freq_df[['User Id', 'Frequency Diff Score']], on='User Id', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "a02209e8-86a6-4c40-81ef-4e111ffe218a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 5 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   User Id               1000 non-null   int64  \n",
      " 1   Deposit Score         915 non-null    float64\n",
      " 2   Withdrawal Score      514 non-null    float64\n",
      " 3   Gameplay Score        1000 non-null   float64\n",
      " 4   Frequency Diff Score  935 non-null    float64\n",
      "dtypes: float64(4), int64(1)\n",
      "memory usage: 39.2 KB\n"
     ]
    }
   ],
   "source": [
    "total.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "d9361f3a-e1a5-4714-a8e8-41b6a18c0b1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Deposit Score</th>\n",
       "      <th>Withdrawal Score</th>\n",
       "      <th>Gameplay Score</th>\n",
       "      <th>Frequency Diff Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>5670.0</td>\n",
       "      <td>6351.075</td>\n",
       "      <td>19.4</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>17.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id  Deposit Score  Withdrawal Score  Gameplay Score  \\\n",
       "0        0            NaN               NaN             3.0   \n",
       "1        1           50.0               NaN             1.6   \n",
       "2        2         5670.0          6351.075            19.4   \n",
       "3        3          400.0               NaN            16.0   \n",
       "4        4           17.5               NaN             1.0   \n",
       "\n",
       "   Frequency Diff Score  \n",
       "0                   NaN  \n",
       "1                 0.001  \n",
       "2                 0.000  \n",
       "3                 0.004  \n",
       "4                 0.001  "
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "805521a2-0b82-4791-b30c-24ec54f1ebe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "User Id                   0\n",
       "Deposit Score            85\n",
       "Withdrawal Score        486\n",
       "Gameplay Score            0\n",
       "Frequency Diff Score     65\n",
       "dtype: int64"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "592b7276-97f8-4624-a286-f5c29e5d6f51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replaying the null value with zero\n",
    "total.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "16077606-8c92-45ca-aaf7-d20fb95ef395",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Deposit Score</th>\n",
       "      <th>Withdrawal Score</th>\n",
       "      <th>Gameplay Score</th>\n",
       "      <th>Frequency Diff Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>5670.0</td>\n",
       "      <td>6351.075</td>\n",
       "      <td>19.4</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>400.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>17.5</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id  Deposit Score  Withdrawal Score  Gameplay Score  \\\n",
       "0        0            0.0             0.000             3.0   \n",
       "1        1           50.0             0.000             1.6   \n",
       "2        2         5670.0          6351.075            19.4   \n",
       "3        3          400.0             0.000            16.0   \n",
       "4        4           17.5             0.000             1.0   \n",
       "\n",
       "   Frequency Diff Score  \n",
       "0                 0.000  \n",
       "1                 0.001  \n",
       "2                 0.000  \n",
       "3                 0.004  \n",
       "4                 0.001  "
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "5b1618cd-e30b-4d67-b9b7-b3855a0c6a83",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating total engagement score\n",
    "total['Total Engagement Score'] = (\n",
    "    total['Deposit Score'] +\n",
    "    total['Withdrawal Score'] +\n",
    "    total['Gameplay Score'] +\n",
    "    total['Frequency Diff Score']\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "3c8edf16-75c3-448a-9b23-ec1ed5c8379b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Deposit Score</th>\n",
       "      <th>Withdrawal Score</th>\n",
       "      <th>Gameplay Score</th>\n",
       "      <th>Frequency Diff Score</th>\n",
       "      <th>Total Engagement Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.001</td>\n",
       "      <td>51.601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>5670.0</td>\n",
       "      <td>6351.075</td>\n",
       "      <td>19.4</td>\n",
       "      <td>0.000</td>\n",
       "      <td>12040.475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>400.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.004</td>\n",
       "      <td>416.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>17.5</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.001</td>\n",
       "      <td>18.501</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User Id  Deposit Score  Withdrawal Score  Gameplay Score  \\\n",
       "0        0            0.0             0.000             3.0   \n",
       "1        1           50.0             0.000             1.6   \n",
       "2        2         5670.0          6351.075            19.4   \n",
       "3        3          400.0             0.000            16.0   \n",
       "4        4           17.5             0.000             1.0   \n",
       "\n",
       "   Frequency Diff Score  Total Engagement Score  \n",
       "0                 0.000                   3.000  \n",
       "1                 0.001                  51.601  \n",
       "2                 0.000               12040.475  \n",
       "3                 0.004                 416.004  \n",
       "4                 0.001                  18.501  "
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d44ef58-26b9-49ca-9251-0f6ad4a9c2a8",
   "metadata": {},
   "source": [
    "### Top 10 Most Engaged Users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "09e80426-ff03-4ff3-a187-5ddf41e31442",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Deposit Score</th>\n",
       "      <th>Withdrawal Score</th>\n",
       "      <th>Gameplay Score</th>\n",
       "      <th>Frequency Diff Score</th>\n",
       "      <th>Total Engagement Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>634</th>\n",
       "      <td>634</td>\n",
       "      <td>5150.00</td>\n",
       "      <td>78688.525</td>\n",
       "      <td>4.8</td>\n",
       "      <td>0.000</td>\n",
       "      <td>83843.325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>99</td>\n",
       "      <td>11648.00</td>\n",
       "      <td>12015.705</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.032</td>\n",
       "      <td>23665.737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>672</th>\n",
       "      <td>672</td>\n",
       "      <td>21587.00</td>\n",
       "      <td>1168.750</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.030</td>\n",
       "      <td>22757.780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>212</td>\n",
       "      <td>19249.81</td>\n",
       "      <td>2949.250</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.022</td>\n",
       "      <td>22199.282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>740</th>\n",
       "      <td>740</td>\n",
       "      <td>17384.90</td>\n",
       "      <td>1826.440</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.084</td>\n",
       "      <td>19211.824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>566</th>\n",
       "      <td>566</td>\n",
       "      <td>18191.75</td>\n",
       "      <td>925.355</td>\n",
       "      <td>36.6</td>\n",
       "      <td>0.050</td>\n",
       "      <td>19153.755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>714</th>\n",
       "      <td>714</td>\n",
       "      <td>16763.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.034</td>\n",
       "      <td>16764.234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>421</th>\n",
       "      <td>421</td>\n",
       "      <td>8786.00</td>\n",
       "      <td>6349.045</td>\n",
       "      <td>311.4</td>\n",
       "      <td>0.015</td>\n",
       "      <td>15446.460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>369</th>\n",
       "      <td>369</td>\n",
       "      <td>6500.00</td>\n",
       "      <td>7931.040</td>\n",
       "      <td>7.4</td>\n",
       "      <td>0.004</td>\n",
       "      <td>14438.444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>13290.00</td>\n",
       "      <td>760.725</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.050</td>\n",
       "      <td>14053.375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     User Id  Deposit Score  Withdrawal Score  Gameplay Score  \\\n",
       "634      634        5150.00         78688.525             4.8   \n",
       "99        99       11648.00         12015.705             2.0   \n",
       "672      672       21587.00          1168.750             2.0   \n",
       "212      212       19249.81          2949.250             0.2   \n",
       "740      740       17384.90          1826.440             0.4   \n",
       "566      566       18191.75           925.355            36.6   \n",
       "714      714       16763.00             0.000             1.2   \n",
       "421      421        8786.00          6349.045           311.4   \n",
       "369      369        6500.00          7931.040             7.4   \n",
       "30        30       13290.00           760.725             2.6   \n",
       "\n",
       "     Frequency Diff Score  Total Engagement Score  \n",
       "634                 0.000               83843.325  \n",
       "99                  0.032               23665.737  \n",
       "672                 0.030               22757.780  \n",
       "212                 0.022               22199.282  \n",
       "740                 0.084               19211.824  \n",
       "566                 0.050               19153.755  \n",
       "714                 0.034               16764.234  \n",
       "421                 0.015               15446.460  \n",
       "369                 0.004               14438.444  \n",
       "30                  0.050               14053.375  "
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_users = total.sort_values(by='Total Engagement Score', ascending=False).head(10)\n",
    "top_users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "974f7792-177e-4a5f-9b38-93f71403fd3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert datetime strings to datetime objects\n",
    "deposit_df['Datetime'] = pd.to_datetime(deposit_df['Datetime'])\n",
    "withdrawal_df['Datetime'] = pd.to_datetime(withdrawal_df['Datetime'])\n",
    "gameplay_df['Datetime'] = pd.to_datetime(gameplay_df['Datetime'])\n",
    "\n",
    "# Create 'Date' column\n",
    "deposit_df['Date'] = deposit_df['Datetime'].dt.date\n",
    "withdrawal_df['Date'] = withdrawal_df['Datetime'].dt.date\n",
    "gameplay_df['Date'] = gameplay_df['Datetime'].dt.date\n",
    "\n",
    "# Create 'Slot' column\n",
    "def assign_slot(dt):\n",
    "    return 'S1' if dt.hour < 12 else 'S2'\n",
    "\n",
    "deposit_df['Slot'] = deposit_df['Datetime'].apply(assign_slot)\n",
    "withdrawal_df['Slot'] = withdrawal_df['Datetime'].apply(assign_slot)\n",
    "gameplay_df['Slot'] = gameplay_df['Datetime'].apply(assign_slot)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cddb05fc-007c-44e2-b515-f85596b15cb4",
   "metadata": {},
   "source": [
    "## Loyalty Points Calculation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "3dcda15d-7852-453a-8c23-6e9a612b611a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_loyalty_points_for_slot(date_str, slot):\n",
    "    date = pd.to_datetime(date_str).date()\n",
    "    \n",
    "    dep = deposit_df[(deposit_df['Date'] == date) & (deposit_df['Slot'] == slot)]\n",
    "    wit = withdrawal_df[(withdrawal_df['Date'] == date) & (withdrawal_df['Slot'] == slot)]\n",
    "    game = gameplay_df[(gameplay_df['Date'] == date) & (gameplay_df['Slot'] == slot)]\n",
    "    \n",
    "    dep_score = dep.groupby('User Id')['Amount'].sum().reset_index()\n",
    "    dep_score['Deposit Score'] = 0.01 * dep_score['Amount']\n",
    "    \n",
    "    wit_score = wit.groupby('User Id')['Amount'].sum().reset_index()\n",
    "    wit_score['Withdrawal Score'] = 0.005 * wit_score['Amount']\n",
    "    \n",
    "    game_score = game.groupby('User Id')['Games Played'].sum().reset_index()\n",
    "    game_score['Gameplay Score'] = 0.2 * game_score['Games Played']\n",
    "    \n",
    "    dep_count = dep['User Id'].value_counts().reset_index()\n",
    "    dep_count.columns = ['User Id', 'Dep Count']\n",
    "    \n",
    "    wit_count = wit['User Id'].value_counts().reset_index()\n",
    "    wit_count.columns = ['User Id', 'Wit Count']\n",
    "    \n",
    "    freq = pd.merge(dep_count, wit_count, on='User Id', how='outer').fillna(0)\n",
    "    freq['Frequency Score'] = 0.001 * (freq['Dep Count'] - freq['Wit Count']).clip(lower=0)\n",
    "    \n",
    "    result = pd.merge(dep_score[['User Id', 'Deposit Score']], wit_score[['User Id', 'Withdrawal Score']], on='User Id', how='outer')\n",
    "    result = pd.merge(result, game_score[['User Id', 'Gameplay Score']], on='User Id', how='outer')\n",
    "    result = pd.merge(result, freq[['User Id', 'Frequency Score']], on='User Id', how='outer')\n",
    "    result.fillna(0, inplace=True)\n",
    "    \n",
    "    result['Total Loyalty Points'] = result['Deposit Score'] + result['Withdrawal Score'] + result['Gameplay Score'] + result['Frequency Score']\n",
    "    \n",
    "    return result.sort_values(by='Total Loyalty Points', ascending=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d020fd4d-0261-4425-ae29-279b31a4d772",
   "metadata": {},
   "source": [
    "## Loyalty points for specific slots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "258054df-ab64-4655-9c46-25ab33eed2db",
   "metadata": {},
   "outputs": [],
   "source": [
    "lp_2oct_s1 = calculate_loyalty_points_for_slot(\"2022-10-02\", \"S1\")\n",
    "lp_16oct_s2 = calculate_loyalty_points_for_slot(\"2022-10-16\", \"S2\")\n",
    "lp_18oct_s1 = calculate_loyalty_points_for_slot(\"2022-10-18\", \"S1\")\n",
    "lp_26oct_s2 = calculate_loyalty_points_for_slot(\"2022-10-26\", \"S2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "022c327a-6ce9-4d9b-a093-ff448cce2147",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Deposit Score</th>\n",
       "      <th>Withdrawal Score</th>\n",
       "      <th>Gameplay Score</th>\n",
       "      <th>Frequency Score</th>\n",
       "      <th>Total Loyalty Points</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [User Id, Deposit Score, Withdrawal Score, Gameplay Score, Frequency Score, Total Loyalty Points]\n",
       "Index: []"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calculate_loyalty_points_for_slot(\"2022-10-02\", \"S1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1c4302c-eb5c-4ecf-8717-2603ba327eed",
   "metadata": {},
   "source": [
    "## Monthly Loyalty Points & Ranking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "e0b252bd-b764-4162-b1de-0aa035e2f282",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter October data\n",
    "oct_start = pd.to_datetime(\"2022-10-01\")\n",
    "oct_end = pd.to_datetime(\"2022-10-31\")\n",
    "\n",
    "dep_oct = deposit_df[(deposit_df['Datetime'] >= oct_start) & (deposit_df['Datetime'] <= oct_end)]\n",
    "wit_oct = withdrawal_df[(withdrawal_df['Datetime'] >= oct_start) & (withdrawal_df['Datetime'] <= oct_end)]\n",
    "game_oct = gameplay_df[(gameplay_df['Datetime'] >= oct_start) & (gameplay_df['Datetime'] <= oct_end)]\n",
    "\n",
    "# Scores\n",
    "dep_score = dep_oct.groupby('User Id')['Amount'].sum().reset_index()\n",
    "dep_score['Deposit Score'] = 0.01 * dep_score['Amount']\n",
    "\n",
    "wit_score = wit_oct.groupby('User Id')['Amount'].sum().reset_index()\n",
    "wit_score['Withdrawal Score'] = 0.005 * wit_score['Amount']\n",
    "\n",
    "game_score = game_oct.groupby('User Id')['Games Played'].sum().reset_index()\n",
    "game_score['Gameplay Score'] = 0.2 * game_score['Games Played']\n",
    "\n",
    "# Frequency Score\n",
    "dep_count = dep_oct['User Id'].value_counts().reset_index()\n",
    "dep_count.columns = ['User Id', 'Dep Count']\n",
    "\n",
    "wit_count = wit_oct['User Id'].value_counts().reset_index()\n",
    "wit_count.columns = ['User Id', 'Wit Count']\n",
    "\n",
    "freq = pd.merge(dep_count, wit_count, on='User Id', how='outer').fillna(0)\n",
    "freq['Frequency Score'] = 0.001 * (freq['Dep Count'] - freq['Wit Count']).clip(lower=0)\n",
    "\n",
    "# Merge\n",
    "monthly = pd.merge(dep_score[['User Id', 'Deposit Score']], wit_score[['User Id', 'Withdrawal Score']], on='User Id', how='outer')\n",
    "monthly = pd.merge(monthly, game_score[['User Id', 'Gameplay Score']], on='User Id', how='outer')\n",
    "monthly = pd.merge(monthly, freq[['User Id', 'Frequency Score']], on='User Id', how='outer')\n",
    "monthly.fillna(0, inplace=True)\n",
    "\n",
    "monthly['Total Loyalty Points'] = monthly['Deposit Score'] + monthly['Withdrawal Score'] + monthly['Gameplay Score'] + monthly['Frequency Score']\n",
    "\n",
    "# Rank by total loyalty and then games played\n",
    "monthly = pd.merge(monthly, game_score[['User Id', 'Games Played']], on='User Id', how='left')\n",
    "monthly = monthly.sort_values(by=['Total Loyalty Points', 'Games Played'], ascending=[False, False])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "9ad6d35d-145e-4f87-8e5b-59925fa8b39e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5492.185399701801\n"
     ]
    }
   ],
   "source": [
    "# Average deposit amount\n",
    "avg_deposit = deposit_df['Amount'].mean()\n",
    "print(avg_deposit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "ba4b1144-36f0-42d9-8d6f-ed9832a0f8f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69553.16802800467\n"
     ]
    }
   ],
   "source": [
    "# Average deposit per user\n",
    "user_avg_deposit = dep_oct.groupby('User Id')['Amount'].sum().mean()\n",
    "print(user_avg_deposit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "6b24de2a-b0be-4c29-aeca-4c529c1e9e5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "224.07312049433574\n"
     ]
    }
   ],
   "source": [
    "# Average number of games played per user\n",
    "avg_games_played = game_oct.groupby('User Id')['Games Played'].sum().mean()\n",
    "print(avg_games_played)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "080a89dc-96d5-4a97-b807-1532d3dac758",
   "metadata": {},
   "source": [
    "## Bonus Allocation Strategy (Top 50 Players)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "bd24a913-a7b6-46bd-852b-1161e7ff59a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_50 = monthly.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "56da7237-8d5d-4b56-bd4b-a77c762a66ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sprat\\AppData\\Local\\Temp\\ipykernel_15480\\254310640.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  top_50['Bonus'] = (top_50['Total Loyalty Points'] / top_50['Total Loyalty Points'].sum()) * 50000\n"
     ]
    }
   ],
   "source": [
    "# ProportionalLoyalty Points\n",
    "top_50['Bonus'] = (top_50['Total Loyalty Points'] / top_50['Total Loyalty Points'].sum()) * 50000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "feb4eb6b-6a9a-4bd4-9af6-f7f0e6d241c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User Id</th>\n",
       "      <th>Deposit Score</th>\n",
       "      <th>Withdrawal Score</th>\n",
       "      <th>Gameplay Score</th>\n",
       "      <th>Frequency Score</th>\n",
       "      <th>Total Loyalty Points</th>\n",
       "      <th>Games Played</th>\n",
       "      <th>Bonus</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>632</th>\n",
       "      <td>634</td>\n",
       "      <td>2700.00</td>\n",
       "      <td>55417.095</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.000</td>\n",
       "      <td>58121.295</td>\n",
       "      <td>21.0</td>\n",
       "      <td>7237.438649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>712</th>\n",
       "      <td>714</td>\n",
       "      <td>14180.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.023</td>\n",
       "      <td>14180.823</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1765.838777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>212</td>\n",
       "      <td>11849.87</td>\n",
       "      <td>1597.340</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.016</td>\n",
       "      <td>13447.226</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1674.489069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>670</th>\n",
       "      <td>672</td>\n",
       "      <td>12087.00</td>\n",
       "      <td>250.000</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.022</td>\n",
       "      <td>12338.422</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1536.417457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>99</td>\n",
       "      <td>7694.00</td>\n",
       "      <td>4295.125</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.021</td>\n",
       "      <td>11989.946</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1493.024176</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     User Id  Deposit Score  Withdrawal Score  Gameplay Score  \\\n",
       "632      634        2700.00         55417.095             4.2   \n",
       "712      714       14180.00             0.000             0.8   \n",
       "210      212       11849.87          1597.340             0.0   \n",
       "670      672       12087.00           250.000             1.4   \n",
       "97        99        7694.00          4295.125             0.8   \n",
       "\n",
       "     Frequency Score  Total Loyalty Points  Games Played        Bonus  \n",
       "632            0.000             58121.295          21.0  7237.438649  \n",
       "712            0.023             14180.823           4.0  1765.838777  \n",
       "210            0.016             13447.226           NaN  1674.489069  \n",
       "670            0.022             12338.422           7.0  1536.417457  \n",
       "97             0.021             11989.946           4.0  1493.024176  "
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_50.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b098d409-ebb8-4724-b7a8-4e150f446edb",
   "metadata": {},
   "source": [
    "### The current formula gives points for deposits, withdrawals, how often users deposit vs. withdraw, and how many games they play. It’s a good mix, but a bit too focused on money.\n",
    "\n",
    "#### For example, someone depositing a lot but barely playing can still end up with a high score. That doesn’t feel fair to regular players who are actually active on the platform.\n",
    "\n",
    "### My  Suggestions would be \n",
    "#### 1. Give more weight to games played, it shows real engagement.\n",
    "\n",
    "#### 2. We can limit how much points heavy deposits can give in.\n",
    "\n",
    "#### 3. And maybe reward users who are regularly play, not just players who spend high on games."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d75d40eb-f8e8-4d3b-96af-de41acc90f74",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
